<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Book Club</title>
<style>
  /* Idaho seal–inspired palette */
  :root{
    --pine:#2f4a3e; --spruce:#3e5a4c; --sage:#8ca093; --silver:#c2c7c9;
    --mist:#efe6db; --accent:#d59a63; --ink:#2a2f2d; --muted:#5f6b64;
    --line:#dfe5e1; --gold:#b8860b; --glass:rgba(255,255,255,.18);
    --glass-2:rgba(255,255,255,.28); --shadow:0 20px 40px rgba(0,0,0,.10)
  }
  *{margin:0;padding:0;box-sizing:border-box}
  body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,system-ui,Helvetica,Arial,sans-serif;background:linear-gradient(135deg,var(--spruce) 0%,var(--pine) 45%,var(--sage) 100%);min-height:100vh;padding:20px;color:var(--ink)}
  .container{max-width:1200px;margin:0 auto}
  .header{color:#fff;text-align:center;margin-bottom:30px}
  .header h1{font-size:2.5rem;margin-bottom:10px;text-shadow:0 2px 4px rgba(0,0,0,.3)}
  .header p{opacity:.95;font-size:1.1rem}

  .user-info{display:none;justify-content:space-between;align-items:center;background:var(--glass);padding:10px 20px;border-radius:20px;color:#fff;margin-bottom:20px;backdrop-filter:blur(12px);border:1px solid var(--glass-2)}
  .toolbar{display:flex;gap:8px}
  .pill-btn{background:none;border:1px solid #fff;color:#fff;padding:6px 14px;border-radius:14px;cursor:pointer;font-size:12px}
  .pill-btn:hover{background:rgba(255,255,255,.18)}

  .stats-bar{display:flex;justify-content:center;gap:30px;margin-bottom:30px;flex-wrap:wrap}
  .stat-card{background:var(--glass);padding:14px 22px;border-radius:20px;color:#fff;text-align:center;border:1px solid var(--glass-2);backdrop-filter:blur(15px);transition:.25s}
  .stat-card:hover{transform:translateY(-5px);background:rgba(255,255,255,.3)}
  .stat-number{font-size:2rem;font-weight:700;display:block}
  .stat-label{font-size:.9rem;opacity:.9}

  .nav{display:flex;gap:10px;justify-content:center;margin-bottom:30px;flex-wrap:wrap}
  .nav-btn{background:var(--glass);color:#fff;border:2px solid var(--glass-2);padding:12px 24px;border-radius:25px;cursor:pointer;transition:.2s;backdrop-filter:blur(10px)}
  .nav-btn:hover,.nav-btn.active{background:rgba(255,255,255,.34);transform:translateY(-2px)}

  .content{background:rgba(255,255,255,.97);border-radius:20px;padding:30px;box-shadow:var(--shadow)}
  .login-screen{text-align:center;padding:60px 20px}
  .login-form{background:#fff;padding:40px;border-radius:20px;box-shadow:0 10px 30px rgba(0,0,0,.1);max-width:420px;margin:0 auto}
  .login-form h2{color:var(--spruce);margin-bottom:10px}

  .section{display:none}.section.active{display:block}

  .add-book-form{background:linear-gradient(135deg,var(--mist) 0%,#e9e1d2 100%);padding:24px;border-radius:15px;margin-bottom:30px;border-left:4px solid var(--pine)}
  .form-row{display:flex;gap:12px;flex-wrap:wrap}
  .form-group{flex:1 1 250px;margin-bottom:14px}
  .form-group label{display:block;margin-bottom:6px;font-weight:600;color:var(--ink)}
  .input,.select,.textarea{width:100%;padding:12px;border:2px solid var(--line);border-radius:8px;font-size:16px;transition:.2s border-color}
  .textarea{resize:vertical;min-height:100px}
  .input:focus,.select:focus,.textarea:focus{outline:none;border-color:var(--pine)}
  .btn{background:linear-gradient(135deg,var(--pine) 0%,var(--spruce) 100%);color:#fff;border:none;padding:12px 22px;border-radius:25px;cursor:pointer;font-size:16px;font-weight:600;transition:.2s}
  .btn:hover{transform:translateY(-2px);box-shadow:0 5px 15px rgba(47,74,62,.35)}
  .btn-small{padding:6px 12px;font-size:12px;margin:2px}
  .btn-danger{background:#b74a4a}

  .search-filter{display:flex;gap:10px;margin-bottom:18px;flex-wrap:wrap}
  .chip{background:#e8efe9;border:1px solid #d9e4dc;color:#2e4a3a;padding:6px 10px;border-radius:999px;font-size:12px}

  /* Activity (capped w/ toggle) */
  .activity{background:#fff;border-radius:15px;padding:16px 18px;margin-bottom:18px;border-left:4px solid var(--accent);box-shadow:0 6px 18px rgba(0,0,0,.08)}
  .activity-head{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}
  .activity h3{color:#6b765f}
  .activity-body{max-height:260px;overflow:auto}
  .activity.expanded .activity-body{max-height:520px}
  .activity-item{display:flex;gap:12px;align-items:flex-start;padding:10px 0;border-bottom:1px solid #f1f1f1}
  .activity-item:last-child{border-bottom:none}
  .activity-badge{width:36px;height:36px;border-radius:10px;display:flex;align-items:center;justify-content:center;background:#f3eee4}
  .activity-meta{font-size:12px;color:#888}

  .book-feed{display:flex;flex-direction:column;gap:24px}
  .book-post{background:#fff;border-radius:15px;padding:22px;box-shadow:0 10px 30px rgba(0,0,0,.1);transition:.25s;border-left:4px solid var(--pine)}
  .book-post:hover{transform:translateY(-3px);box-shadow:0 15px 35px rgba(0,0,0,.15)}
  .post-header{display:flex;gap:18px;margin-bottom:16px;align-items:flex-start}
  .book-cover{width:100px;height:150px;object-fit:cover;border-radius:10px;border:2px solid var(--line);flex-shrink:0}
  .book-cover-placeholder{width:100px;height:150px;background:linear-gradient(135deg,#e9ecef 0%,#dee2e6 100%);border-radius:10px;display:flex;align-items:center;justify-content:center;font-size:12px;color:#6c757d;flex-shrink:0}
  .book-info{flex:1}
  .book-title{font-size:1.35rem;font-weight:800;color:var(--ink);margin-bottom:6px}
  .book-author{color:var(--muted);margin-bottom:6px;font-style:italic}
  .book-genre{background:var(--pine);color:#fff;padding:4px 12px;border-radius:15px;font-size:.8rem;font-weight:700;text-transform:uppercase;display:inline-block;margin-bottom:8px}
  .book-recommender{font-size:.95rem;color:var(--spruce);font-weight:600;margin-bottom:10px}
  .book-rating{display:flex;align-items:center;gap:10px;margin-bottom:10px}
  .stars{display:flex;gap:3px}
  .star{font-size:18px;color:#999;cursor:pointer;transition:color .15s}
  .star.filled,.star:hover{color:var(--gold)}
  .block-title{font-weight:700;color:#3c4e44;margin-bottom:4px}
  .book-synopsis,.book-reason{color:#555;line-height:1.6;margin-bottom:12px}

  .post-actions{display:flex;gap:12px;align-items:center;padding:12px 0;border-top:1px solid #f0f0f0;border-bottom:1px solid #f0f0f0;margin-bottom:14px;flex-wrap:wrap}
  .action-btn{background:none;border:1px solid var(--pine);color:var(--pine);padding:8px 14px;border-radius:20px;cursor:pointer;transition:.2s;font-size:14px;display:flex;align-items:center;gap:6px}
  .action-btn:hover,.action-btn.active{background:var(--pine);color:#fff}

  .comments-section{margin-top:8px}
  .comment{background:#f6faf7;padding:12px;border-radius:10px;margin-bottom:10px;border:1px solid #e0ebe4}
  .comment-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:6px}
  .commenter-name{font-weight:700;color:var(--spruce)}
  .comment-rating{color:var(--gold);font-size:14px}
  .comment-text{color:#555;margin-bottom:8px}
  .like-comment-btn{background:none;border:none;color:#999;font-size:12px;cursor:pointer}
  .like-comment-btn.liked,.like-comment-btn:hover{color:var(--spruce)}
  .add-comment{margin-top:10px;background:#fff;padding:14px;border:1px solid #dee2e6;border-radius:10px}
  .comment-form{display:flex;flex-direction:column;gap:10px}
  .comment-input-row{display:flex;gap:10px;align-items:center}
  .comment-input{flex:1;padding:8px 12px;border:1px solid #dee2e6;border-radius:6px;font-size:14px}
  .comment-textarea{padding:10px 12px;border:1px solid #dee2e6;border-radius:6px;resize:vertical;min-height:60px}

  .reading-list{background:#fff;border-radius:15px;padding:18px;margin-bottom:18px;box-shadow:0 5px 15px rgba(0,0,0,.08)}
  .reading-list h3{color:var(--spruce);margin-bottom:10px}
  .list-item{display:flex;justify-content:space-between;align-items:center;padding:12px 0;border-bottom:1px solid #f0f0f0}
  .list-item:last-child{border-bottom:none}

  .dropdown{position:relative}
  .results{position:absolute;z-index:40;top:100%;left:0;right:0;background:#fff;border:1px solid #e5e7eb;border-radius:10px;box-shadow:0 10px 30px rgba(0,0,0,.12);margin-top:6px;max-height:280px;overflow:auto}
  .result-item{padding:10px 12px;display:flex;gap:10px;align-items:center;cursor:pointer}
  .result-item:hover{background:#f4f7f5}
  .result-cover{width:32px;height:48px;border-radius:6px;object-fit:cover;background:#e9ecef}

  .toast{position:fixed;bottom:24px;right:24px;background:#1d1f1e;color:#fff;padding:10px 14px;border-radius:10px;opacity:0;transform:translateY(10px);transition:.25s;pointer-events:none;z-index:9999;max-width:70ch;box-shadow:0 8px 24px rgba(0,0,0,.25)}
  .toast.show{opacity:1;transform:translateY(0)}
  .modal{position:fixed;inset:0;background:rgba(0,0,0,.35);display:none;align-items:center;justify-content:center;z-index:10000}
  .modal .card{background:#fff;border-radius:16px;padding:20px;max-width:520px;width:90%;box-shadow:0 12px 36px rgba(0,0,0,.25)}
  .modal .actions{display:flex;gap:10px;justify-content:flex-end;margin-top:12px}

  @media (max-width:768px){
    .post-header{flex-direction:column;align-items:center;text-align:center}
    .post-actions{flex-wrap:wrap}
    .search-filter{flex-direction:column}
  }
</style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>Book Club</h1>
      <p>Find your next favorite book</p>
    </div>

    <div id="user-info" class="user-info" aria-live="polite">
      <span>Welcome, <strong id="current-user-name"></strong>!</span>
      <div class="toolbar">
        <button class="pill-btn" id="export-btn" type="button">Export Data</button>
        <button class="pill-btn" id="logout-btn" type="button">Switch User</button>
      </div>
    </div>

    <div class="stats-bar" role="region" aria-label="Stats">
      <div class="stat-card"><span class="stat-number" id="total-books">0</span><span class="stat-label">Books</span></div>
      <div class="stat-card"><span class="stat-number" id="total-reviews">0</span><span class="stat-label">Reviews</span></div>
      <div class="stat-card"><span class="stat-number" id="avg-rating">0.0</span><span class="stat-label">Avg Rating</span></div>
      <div class="stat-card"><span class="stat-number" id="books-read">0</span><span class="stat-label">Books Read</span></div>
    </div>

    <nav class="nav" aria-label="Primary">
      <button class="nav-btn active" id="feed-btn" type="button">Book Feed</button>
      <button class="nav-btn" id="add-btn" type="button">Add Book</button>
      <button class="nav-btn" id="my-books-btn" type="button">My Lists</button>
      <button class="nav-btn" id="professional-btn" type="button">Professional Books</button>
      <button class="nav-btn" id="prefs-btn" type="button">Preferences</button>
    </nav>

    <main class="content">
      <!-- Login -->
      <section id="login-section" class="login-screen">
        <form class="login-form" id="login-form" novalidate>
          <h2>Welcome to Book Club!</h2>
          <p style="margin-bottom:20px;color:var(--muted)">Enter your first name to access your personal reading lists</p>
          <div class="form-group">
            <label for="username-input" class="visually-hidden">First name</label>
            <input class="input" type="text" id="username-input" placeholder="Enter your first name" autocomplete="given-name" required style="text-align:center"/>
          </div>
          <button class="btn" type="submit">Join Book Club</button>
        </form>
      </section>

      <!-- App -->
      <section id="main-app" style="display:none">
        <!-- Feed -->
        <section id="feed" class="section active" aria-label="Book Feed">
          <div class="activity" id="activity">
            <div class="activity-head">
              <h3>Activity</h3>
              <button id="activity-toggle" class="pill-btn" type="button">Show more</button>
            </div>
            <div id="activity-list" class="activity-body"></div>
          </div>

          <div class="search-filter">
            <input type="text" class="input" placeholder="Search title, author, recommender, synopsis…" id="search-input" aria-label="Search books"/>
            <select class="select" id="category-filter" aria-label="Category">
              <option value="">All Categories</option>
              <option value="professional">Professional</option>
              <option value="fiction">Fiction</option>
              <option value="non-fiction">Non-Fiction</option>
              <option value="biography">Biography</option>
              <option value="self-help">Self-Help</option>
              <option value="other">Other</option>
            </select>
            <select class="select" id="recommender-filter" aria-label="Recommended by">
              <option value="">All Recommenders</option>
            </select>
            <select class="select" id="min-rating" aria-label="Minimum rating">
              <option value="0">Min Rating (Any)</option>
              <option value="5">5★</option>
              <option value="4">4★+</option>
              <option value="3">3★+</option>
            </select>
            <select class="select" id="sort-by" aria-label="Sort">
              <option value="new">Newest</option>
              <option value="likes">Most Likes</option>
              <option value="rating">Rating (High → Low)</option>
              <option value="title">Title (A → Z)</option>
            </select>
            <span class="chip" id="result-count"></span>
          </div>

          <div id="books-feed" class="book-feed"></div>
        </section>

        <!-- Add Book -->
        <section id="add" class="section" aria-label="Add Book">
          <div class="add-book-form">
            <h2 style="margin-bottom:10px;color:var(--ink)">Share a Book Recommendation</h2>

            <div class="form-row">
              <div class="form-group dropdown" style="flex:2 1 380px">
                <label for="book-search">Search books to auto-fill (Open Library)</label>
                <input id="book-search" class="input" type="text" placeholder="Start typing a title or author…"/>
                <div id="book-results" class="results" style="display:none"></div>
              </div>
            </div>

            <form id="book-form" novalidate>
              <div class="form-row">
                <div class="form-group">
                  <label for="title">Book Title</label>
                  <input class="input" type="text" id="title" required/>
                </div>
                <div class="form-group">
                  <label for="author">Author</label>
                  <input class="input" type="text" id="author" required/>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="genre">Category</label>
                  <select class="select" id="genre">
                    <option value="fiction">Fiction</option>
                    <option value="non-fiction">Non-Fiction</option>
                    <option value="biography">Biography</option>
                    <option value="self-help">Self-Help</option>
                    <option value="other">Other</option>
                    <option value="professional">Professional</option>
                  </select>
                </div>
                <div class="form-group">
                  <label for="recommender">Your Name</label>
                  <input class="input" type="text" id="recommender" required/>
                </div>
              </div>

              <div class="form-row">
                <div class="form-group">
                  <label for="book-image">Book Cover Image (optional)</label>
                  <input class="input" type="url" id="book-image" placeholder="https://example.com/book-cover.jpg"/>
                </div>
              </div>

              <div class="form-group">
                <label for="synopsis">Synopsis (auto-filled when available)</label>
                <textarea class="textarea" id="synopsis" placeholder="Short summary from Open Library…"></textarea>
              </div>

              <div class="form-group">
                <label for="reason">Why you recommend it (your words)</label>
                <textarea class="textarea" id="reason" required placeholder="Tell your colleagues why they should read this book…"></textarea>
              </div>

              <div class="form-group" aria-label="Your Rating">
                <label>Your Rating</label>
                <div class="stars" id="rating-stars" role="radiogroup" aria-label="Rating from 1 to 5">
                  <button class="star" type="button" data-rating="1" aria-pressed="false" aria-label="1 star">★</button>
                  <button class="star" type="button" data-rating="2" aria-pressed="false" aria-label="2 stars">★</button>
                  <button class="star" type="button" data-rating="3" aria-pressed="false" aria-label="3 stars">★</button>
                  <button class="star" type="button" data-rating="4" aria-pressed="false" aria-label="4 stars">★</button>
                  <button class="star" type="button" data-rating="5" aria-pressed="true"  aria-label="5 stars">★</button>
                </div>
              </div>

              <button type="submit" class="btn">Share Book</button>
            </form>
          </div>
        </section>

        <!-- My Lists -->
        <section id="my-books" class="section" aria-label="My Reading Lists">
          <h2 style="margin-bottom:12px;color:var(--ink)">My Reading Lists</h2>

          <div class="reading-list">
            <h3>Currently Reading</h3>
            <div id="current-reading"></div>
          </div>

          <div class="reading-list">
            <h3>Want to Read</h3>
            <div id="wish-list"></div>
          </div>

          <div class="reading-list">
            <h3>Previously Read</h3>
            <div id="read-list"></div>
          </div>
        </section>

        <!-- Professional -->
        <section id="professional" class="section" aria-label="Professional Development Books">
          <h2 style="margin-bottom:10px;color:var(--ink)">Professional Development Books</h2>
          <p style="margin-bottom:18px;color:var(--muted)">Books relevant to probation work, criminal justice, and professional growth</p>
          <div id="professional-books" class="book-feed"></div>
        </section>

        <!-- Preferences -->
        <section id="prefs" class="section" aria-label="Preferences">
          <h2 style="margin-bottom:12px;color:var(--ink)">Preferences</h2>

          <div class="reading-list">
            <h3>Teams Channel Notifications</h3>
            <p style="color:var(--muted);margin-bottom:8px">
              Optional. Add an <em>Incoming Webhook</em> to your Teams <strong>channel</strong>, then paste the URL here.
              If set, the app will post messages for the selected events.
            </p>
            <div class="form-row">
              <div class="form-group" style="flex:2 1 520px">
                <label for="pref-teams-url">Teams Webhook URL</label>
                <input id="pref-teams-url" class="input" type="url" placeholder="https://outlook.office.com/webhook/..."/>
              </div>
            </div>
            <div class="form-row">
              <div class="form-group"><label><input id="pref-post-new" type="checkbox" checked/> Post on <strong>new book</strong></label></div>
              <div class="form-group"><label><input id="pref-post-finish" type="checkbox" checked/> Post when someone <strong>finishes a book</strong></label></div>
              <div class="form-group"><label><input id="pref-post-5" type="checkbox" checked/> Post for <strong>new 5★ ratings</strong> (incl. “Previously Read” 5★)</label></div>
            </div>
            <button id="prefs-save" class="btn" type="button">Save Preferences</button>
          </div>
        </section>
      </section>
    </main>
  </div>

  <div id="toast" class="toast" role="status" aria-live="polite"></div>

  <!-- Rating modal (used for Finish + Previously Read) -->
  <div id="finish-modal" class="modal" aria-hidden="true">
    <div class="card">
      <h3 id="finish-heading" style="margin-bottom:8px">Rate this book</h3>
      <p id="finish-title" style="color:var(--muted);margin-bottom:8px"></p>
      <div class="stars" id="finish-stars" style="margin:8px 0 4px">
        <button class="star" data-rating="1" type="button">★</button>
        <button class="star" data-rating="2" type="button">★</button>
        <button class="star" data-rating="3" type="button">★</button>
        <button class="star" data-rating="4" type="button">★</button>
        <button class="star" data-rating="5" type="button">★</button>
      </div>
      <div class="actions">
        <button class="btn" id="finish-save" type="button">Save</button>
        <button class="btn btn-danger" id="finish-cancel" type="button">Cancel</button>
      </div>
    </div>
  </div>

<script>
/* ========= Storage & State ========= */
const LS={books:'bookclub_books',users:'bookclub_userData',current:'bookclub_currentUser',activity:'bookclub_activity',site:'bookclub_sitePrefs'};
let currentUser=''; let books=[]; let userData={}; let activity=[]; let currentBooks=[]; let currentRating=5;
const commentRatings=new Map(); let finishContext=null; let activityExpanded=false;
let sitePrefs={teamsWebhook:'',postNew:true,postFinish:true,postFive:true};

function loadAll(){
  try{
    books=JSON.parse(localStorage.getItem(LS.books)||'[]')||[];
    userData=JSON.parse(localStorage.getItem(LS.users)||'{}')||{};
    currentUser=localStorage.getItem(LS.current)||'';
    activity=JSON.parse(localStorage.getItem(LS.activity)||'[]')||[];
    sitePrefs=Object.assign(sitePrefs, JSON.parse(localStorage.getItem(LS.site)||'{}'));
  }catch{}
}
function saveAll(){
  localStorage.setItem(LS.books,JSON.stringify(books));
  localStorage.setItem(LS.users,JSON.stringify(userData));
  localStorage.setItem(LS.current,currentUser);
  localStorage.setItem(LS.activity,JSON.stringify(activity));
  localStorage.setItem(LS.site,JSON.stringify(sitePrefs));
}
const defaultUser=()=>({readList:[],wishList:[],currentReading:[]});
function ensureUser(name){ if(!userData[name]) userData[name]=defaultUser(); }
const me=()=>userData[currentUser]||defaultUser();

/* ========= Utilities ========= */
const $=(s,root=document)=>root.querySelector(s);
const $$=(s,root=document)=>Array.from(root.querySelectorAll(s));
const now=()=>new Date().toISOString();
const timeAgo=(iso)=>{const d=new Date(iso);const s=(Date.now()-d)/1000;if(s<60)return`${Math.floor(s)}s ago`;const m=s/60;if(m<60)return`${Math.floor(m)}m ago`;const h=m/60;if(h<24)return`${Math.floor(h)}h ago`;return`${Math.floor(h/24)}d ago`};
const escapeHtml=(s='')=>String(s).replaceAll('&','&amp;').replaceAll('<','&lt;').replaceAll('>','&gt;');
const escapeAttr=(s='')=>escapeHtml(s).replaceAll('"','&quot;');
const showToast=(msg)=>{const t=$('#toast');t.textContent=msg;t.classList.add('show');clearTimeout(showToast._t);showToast._t=setTimeout(()=>t.classList.remove('show'),1700);};
const formatStars=(n)=>'★'.repeat(n)+'☆'.repeat(5-n);
const debounce=(fn,ms=300)=>{let t;return(...a)=>{clearTimeout(t);t=setTimeout(()=>fn(...a),ms);};};
const truncate=(s,n=400)=> s && s.length>n ? s.slice(0,n-1)+'…' : s;

/* ========= Teams Channel Posting (optional) ========= */
async function postToTeams(type, text){
  const url = sitePrefs.teamsWebhook?.trim();
  if(!url) return; // not configured
  const allow = (type==='new' && sitePrefs.postNew) ||
                (type==='finish' && sitePrefs.postFinish) ||
                (type==='five' && sitePrefs.postFive);
  if(!allow) return;
  try{
    await fetch(url,{
      method:'POST',
      mode:'no-cors',                  // send without CORS errors; we don't read the response
      headers:{'Content-Type':'application/json'},
      body:JSON.stringify({text})
    });
  }catch(e){ console.error('Teams post failed',e); }
}

/* ========= Activity ========= */
function postActivity(type,payload){
  activity.unshift({id:Date.now(),type,payload,at:now()});
  if(activity.length>200) activity.length=200;
  saveAll(); renderActivity();
}
function activityIcon(type){ return ({share:'📣',finish:'🏁','five':'🏆','prev':'📖'}[type]||'📝'); }
function renderActivity(){
  const list=$('#activity-list');
  const cap = activityExpanded ? 30 : 10;
  if(!activity.length){
    list.innerHTML='<div class="activity-item"><div class="activity-badge">👋</div><div>Welcome! Share a book to kick off the activity feed.</div></div>';
    return;
  }
  list.innerHTML = activity.slice(0,cap).map(a=>{
    const {type,payload,at}=a;
    let text='';
    if(type==='share'){
      text=`<strong>${escapeHtml(payload.user)}</strong> shared <em>${escapeHtml(payload.title)}</em> by ${escapeHtml(payload.author)} (${payload.rating}★).`;
    } else if(type==='finish'){
      text=`<strong>${escapeHtml(payload.user)}</strong> finished <em>${escapeHtml(payload.title)}</em> — ${payload.rating}★.`;
    } else if(type==='five'){
      text=`<strong>${escapeHtml(payload.user)}</strong> rated <em>${escapeHtml(payload.title)}</em> <strong>5★</strong>.`;
    } else {
      text=`<strong>${escapeHtml(payload.user)}</strong> marked previously read <em>${escapeHtml(payload.title)}</em>.`;
    }
    return `<div class="activity-item">
      <div class="activity-badge">${activityIcon(type)}</div>
      <div><div>${text}</div><div class="activity-meta">${timeAgo(at)}</div></div>
    </div>`;
  }).join('');
  $('#activity-toggle').textContent = activityExpanded ? 'Show less' : 'Show more';
  $('#activity').classList.toggle('expanded',activityExpanded);
}

/* ========= Rendering ========= */
function bookCoverBlock(book){
  return book.image
    ? `<img class="book-cover" loading="lazy" alt="Cover of ${escapeHtml(book.title)}" src="${escapeAttr(book.image)}"/>`
    : `<div class="book-cover-placeholder" aria-hidden="true">No Cover</div>`;
}
function bookCard(book){
  const liked=currentUser && (book.postLikedBy||[]).includes(currentUser);
  const synopsis=book.synopsis||'';
  const reason=book.reason||'';
  return `
  <article class="book-post" data-id="${book.id}">
    <div class="post-header">
      ${bookCoverBlock(book)}
      <div class="book-info">
        <div class="book-genre">${escapeHtml(book.genre)}</div>
        <h3 class="book-title">${escapeHtml(book.title)}</h3>
        <div class="book-author">by ${escapeHtml(book.author)}</div>
        <div class="book-recommender">Recommended by ${escapeHtml(book.recommender)}</div>
        <div class="book-rating"><div class="stars">${formatStars(book.rating||0)}</div><span>(${book.rating||0}/5)</span></div>
      </div>
    </div>

    ${synopsis?`<div class="book-synopsis"><div class="block-title">Synopsis</div>${escapeHtml(synopsis)}</div>`:''}
    ${reason?`<div class="book-reason"><div class="block-title">Why ${escapeHtml(book.recommender)} recommends it</div>${escapeHtml(reason)}</div>`:''}

    <div class="post-actions">
      <button class="action-btn ${liked?'active':''}" type="button" data-action="like" data-id="${book.id}">👍 <span data-like-count>${book.postLikes||0}</span> Likes</button>
      <button class="action-btn" type="button" data-action="wish" data-id="${book.id}">📚 Want to Read</button>
      <button class="action-btn" type="button" data-action="reading" data-id="${book.id}">📖 Currently Reading</button>
      <button class="action-btn" type="button" data-action="finish" data-id="${book.id}">✅ Mark as Read</button>
      <button class="action-btn" type="button" data-action="prev" data-id="${book.id}">✔️ Previously Read</button>
    </div>

    <div class="comments-section">
      <strong>Comments (${(book.comments||[]).length}):</strong>
      ${(book.comments||[]).map(c=>`
        <div class="comment" data-comment-id="${c.id}">
          <div class="comment-header">
            <span class="commenter-name">${escapeHtml(c.commenter)}</span>
            <span class="comment-rating">${formatStars(c.rating)}</span>
          </div>
          <div class="comment-text">${escapeHtml(c.text)}</div>
          <div class="comment-actions">
            <button class="like-comment-btn ${(c.likedBy||[]).includes(currentUser)?'liked':''}" type="button" data-action="like-comment" data-id="${book.id}" data-cid="${c.id}">👍 ${c.likes||0}</button>
          </div>
        </div>`).join('')}
      <div class="add-comment">
        <div class="comment-form" data-id="${book.id}">
          <div class="comment-input-row">
            <input type="text" placeholder="Your name" class="comment-input" data-field="name" value="${escapeAttr(currentUser)}"/>
            <div class="stars" data-role="comment-stars" data-id="${book.id}">
              ${[1,2,3,4,5].map(n=>`<button class="star ${n<= (commentRatings.get(book.id)||5)?'filled':''}" type="button" data-action="comment-rating" data-id="${book.id}" data-rating="${n}" aria-label="${n} star">★</button>`).join('')}
            </div>
          </div>
          <textarea placeholder="Write your comment..." class="comment-textarea" data-field="text"></textarea>
          <button class="btn btn-small" type="button" data-action="add-comment" data-id="${book.id}">Add Comment</button>
        </div>
      </div>
    </div>
  </article>`;
}
function renderBooks(){
  const c=$('#books-feed');
  if(!currentBooks.length){
    c.innerHTML=`<div class="empty-state"><h3>No books found</h3><p>Try adjusting search/filters or add a new recommendation!</p></div>`;
    $('#result-count').textContent='0 results';
    return;
  }
  c.innerHTML=currentBooks.map(bookCard).join('');
  currentBooks.forEach(b=>commentRatings.set(b.id,5));
  $('#result-count').textContent=`${currentBooks.length} result${currentBooks.length===1?'':'s'}`;
}
function renderProfessionalBooks(){
  const list=books.filter(b=>b.genre==='professional');
  const c=$('#professional-books');
  if(!list.length){c.innerHTML=`<div class="empty-state"><h3>No professional books yet</h3><p>Be the first to recommend one!</p></div>`;return;}
  c.innerHTML=list.map(bookCard).join('');
  list.forEach(b=>commentRatings.set(b.id,5));
}
function renderMyLists(){
  const data=me();
  const make=(arr,actions)=> arr.length?arr.map(b=>`
    <div class="list-item" data-id="${b.id}">
      <div><strong>${escapeHtml(b.title)}</strong> by ${escapeHtml(b.author)}</div>
      <div>${actions(b)}</div>
    </div>`).join(''):`<p style="color:#999;font-style:italic">Nothing here yet</p>`;
  $('#current-reading').innerHTML=make(data.currentReading,(b)=>`
    <button class="btn btn-small" type="button" data-action="finish" data-id="${b.id}">Mark as Read</button>
    <button class="btn btn-small btn-danger" type="button" data-action="remove-current" data-id="${b.id}">Remove</button>`);
  $('#wish-list').innerHTML=make(data.wishList,(b)=>`
    <button class="btn btn-small" type="button" data-action="reading" data-id="${b.id}">Start Reading</button>
    <button class="btn btn-small btn-danger" type="button" data-action="remove-wish" data-id="${b.id}">Remove</button>`);
  $('#read-list').innerHTML=make(data.readList,(b)=>`
    <span class="chip">${(b._rating||b.rating||0)}★</span>
    <button class="btn btn-small btn-danger" type="button" data-action="remove-read" data-id="${b.id}">Remove</button>`);
}

/* ========= Stats / Filters ========= */
function updateStats(){
  const totalBooks=books.length;
  const totalComments=books.reduce((s,b)=>s+(b.comments?.length||0),0);
  const avg=totalBooks?(books.reduce((s,b)=>s+(b.rating||0),0)/totalBooks):0;
  const readCount=me().readList.length;
  $('#total-books').textContent=String(totalBooks);
  $('#total-reviews').textContent=String(totalComments);
  $('#avg-rating').textContent=avg.toFixed(1);
  $('#books-read').textContent=String(readCount);
}
function getUniqueRecommenders(){ return Array.from(new Set(books.map(b=>b.recommender).filter(Boolean))).sort((a,b)=>a.localeCompare(b)); }
function populateRecommenderFilter(){
  const sel=$('#recommender-filter'); const cur=sel.value;
  sel.innerHTML=['<option value="">All Recommenders</option>'].concat(getUniqueRecommenders().map(n=>`<option value="${escapeAttr(n)}">${escapeHtml(n)}</option>`)).join('');
  if(cur && getUniqueRecommenders().includes(cur)) sel.value=cur;
}
function applyFilters(){
  const term=$('#search-input').value.trim().toLowerCase();
  const cat=$('#category-filter').value;
  const who=$('#recommender-filter').value;
  const min=parseInt($('#min-rating').value,10)||0;
  const sort=$('#sort-by').value;
  currentBooks=books.filter(b=>{
    const inSearch=!term||[b.title,b.author,b.recommender,b.synopsis||'',b.reason||''].some(x=>x.toLowerCase().includes(term));
    const inCat=!cat||b.genre===cat;
    const byWho=!who||b.recommender===who;
    const inRating=(b.rating||0)>=min;
    return inSearch&&inCat&&byWho&&inRating;
  });
  if(sort==='new') currentBooks.sort((a,b)=>b.id-a.id);
  else if(sort==='likes') currentBooks.sort((a,b)=>(b.postLikes||0)-(a.postLikes||0));
  else if(sort==='rating') currentBooks.sort((a,b)=>(b.rating||0)-(a.rating||0)).reverse();
  else if(sort==='title') currentBooks.sort((a,b)=>a.title.localeCompare(b.title));
  renderBooks();
}

/* ========= Open Library search ========= */
const searchOpenLibrary = debounce(async (q)=>{
  const box=$('#book-results');
  if(!q||q.length<2){ box.style.display='none'; box.innerHTML=''; return; }
  try{
    const r=await fetch(`https://openlibrary.org/search.json?q=${encodeURIComponent(q)}&limit=10`);
    const data=await r.json();
    const rows=(data.docs||[]).slice(0,10).map(d=>{
      const title=d.title||'';
      const author=(d.author_name||[])[0]||'';
      const cover=d.cover_i?`https://covers.openlibrary.org/b/id/${d.cover_i}-M.jpg`:'';
      const workKey=(d.key||'').replace('/works/','');
      return {title,author,cover,work:`/works/${workKey}`};
    });
    if(!rows.length){ box.style.display='none'; box.innerHTML=''; return; }
    box.innerHTML=rows.map((r,i)=>`
      <div class="result-item" data-i="${i}">
        <img class="result-cover" src="${r.cover||''}" alt="" onerror="this.style.display='none'"/>
        <div><div><strong>${escapeHtml(r.title)}</strong></div><div style="color:#666">${escapeHtml(r.author)}</div></div>
      </div>`).join('');
    box.style.display='block';
    box._rows=rows;
  }catch(e){ box.style.display='none'; box.innerHTML=''; }
},300);

async function chooseOpenLibrary(index){
  const box=$('#book-results');
  const r = (box._rows||[])[index]; if(!r) return;
  $('#title').value=r.title||'';
  $('#author').value=r.author||'';
  if(r.cover) $('#book-image').value=r.cover;
  // Try to get description
  try{
    const d=await fetch(`https://openlibrary.org${r.work}.json`).then(x=>x.json());
    const desc = typeof d.description==='string'?d.description:(d.description?.value||'');
    if(desc) $('#synopsis').value = truncate(desc, 900);
  }catch{}
  box.style.display='none'; box.innerHTML='';
}

/* ========= Actions ========= */
function likePost(book){
  book.postLikedBy = book.postLikedBy||[];
  if(book.postLikedBy.includes(currentUser)){
    book.postLikedBy = book.postLikedBy.filter(n=>n!==currentUser);
    book.postLikes = Math.max(0,(book.postLikes||0)-1);
  }else{
    book.postLikedBy.push(currentUser);
    book.postLikes = (book.postLikes||0)+1;
  }
}

function addTo(listName, book){
  const data=me();
  const list = data[listName];
  if(!list.find(x=>x.id===book.id)) list.push(book);
  // exclusive management
  if(listName==='currentReading') data.wishList = data.wishList.filter(x=>x.id!==book.id);
  if(listName==='readList'){
    data.wishList = data.wishList.filter(x=>x.id!==book.id);
    data.currentReading = data.currentReading.filter(x=>x.id!==book.id);
  }
}

function openFinishModal(book, mode){ // mode: 'finish' or 'prev'
  finishContext={bookId:book.id, mode, rating:5};
  $('#finish-heading').textContent = mode==='finish'?'Rate this book':'Previously Read — give it a rating';
  $('#finish-title').textContent = `${book.title} by ${book.author}`;
  // reset stars
  $$('#finish-stars .star').forEach((s,i)=>{s.classList.toggle('filled', i<5);});
  $('#finish-modal').style.display='flex';
}

function closeFinishModal(){ finishContext=null; $('#finish-modal').style.display='none'; }

function saveFinishRating(){
  if(!finishContext) return;
  const b = books.find(x=>x.id===finishContext.bookId); if(!b) return closeFinishModal();
  const rating = finishContext.rating||5;
  if(finishContext.mode==='finish'){
    addTo('readList', b);
    b._rating = rating;
    postActivity(rating===5?'five':'finish', {user:currentUser,title:b.title,author:b.author,rating});
    // Teams posting
    const url=window.location.href;
    if(rating===5) postToTeams('five', `🏆 ${currentUser} rated “${b.title}” 5★ • ${url}`);
    else postToTeams('finish', `🏁 ${currentUser} finished “${b.title}” — ${rating}★ • ${url}`);
    showToast('Saved rating and marked as read.');
  }else{ // previously read
    addTo('readList', b);
    b._rating = rating;
    postActivity(rating===5?'five':'prev', {user:currentUser,title:b.title,author:b.author,rating});
    if(rating===5){
      const url=window.location.href;
      postToTeams('five', `🏆 ${currentUser} rated “${b.title}” 5★ (Previously Read) • ${url}`);
    }
    showToast('Saved to Previously Read.');
  }
  saveAll(); updateStats(); renderMyLists(); closeFinishModal();
  applyFilters();
}

/* ========= Export ========= */
function exportAll(){
  const blob = new Blob([JSON.stringify({books,userData,activity,sitePrefs},null,2)],{type:'application/json'});
  const url = URL.createObjectURL(blob);
  const a=document.createElement('a');
  a.href=url; a.download=`bookclub_export_${new Date().toISOString().slice(0,10)}.json`;
  document.body.appendChild(a); a.click(); a.remove();
  URL.revokeObjectURL(url);
}

/* ========= Init & Event Bindings ========= */
function seedIfEmpty(){
  if(books.length===0){
    books = [
      {id:1,title:"The Body Keeps the Score",author:"Bessel van der Kolk",genre:"professional",recommender:"Dr. Sarah Johnson",synopsis:"",reason:"Essential reading for understanding trauma's impact on the brain and body. Directly applicable to our work.",rating:5,image:"",postLikes:8,postLikedBy:["Mike","Jennifer","Tom","Lisa","David","Maria","Alex","Chris"],comments:[
        {id:101,commenter:"Mike Rodriguez",rating:5,text:"Changed how I approach trauma-informed supervision.",likes:3,likedBy:["Sarah","Jennifer","Tom"]},
        {id:102,commenter:"Jennifer Martinez",rating:4,text:"Dense but worth it.",likes:2,likedBy:["Mike","Sarah"]}
      ]},
      {id:2,title:"Just Mercy",author:"Bryan Stevenson",genre:"professional",recommender:"Chief Probation Officer Williams",synopsis:"",reason:"Powerful perspective on fairness and rehabilitation.",rating:5,image:"",postLikes:12,postLikedBy:["Sarah","Mike","Jennifer","Tom","Lisa","David","Maria","Alex","Chris","Pat","Jordan","Sam"],comments:[
        {id:201,commenter:"Lisa Chen",rating:5,text:"Should be required reading for everyone in criminal justice.",likes:7,likedBy:["Sarah","Mike","Jennifer","Tom","David","Maria","Alex"]}
      ]},
      {id:3,title:"Where the Crawdads Sing",author:"Delia Owens",genre:"fiction",recommender:"Jennifer Martinez",synopsis:"",reason:"Beautiful writing and a compelling mystery—great fiction pick!",rating:4,image:"",postLikes:6,postLikedBy:["Sarah","Mike","Tom","Lisa","Maria","Alex"],comments:[
        {id:301,commenter:"Tom Wilson",rating:4,text:"Loved the setting. The mystery kept me guessing.",likes:2,likedBy:["Jennifer","Sarah"]}
      ]}
    ];
  }
}

function showSection(id, btn){
  $$('.section').forEach(s=>s.classList.remove('active'));
  $$('.nav-btn').forEach(b=>b.classList.remove('active'));
  document.getElementById(id).classList.add('active');
  btn.classList.add('active');
  if(id==='my-books') renderMyLists();
  if(id==='professional') renderProfessionalBooks();
}

function init(){
  loadAll(); seedIfEmpty();

  // UI state
  if(currentUser){
    $('#login-section').style.display='none';
    $('#main-app').style.display='block';
    $('#user-info').style.display='flex';
    $('#current-user-name').textContent=currentUser;
    $('#recommender').value=currentUser;
  }

  // Stats & lists & feed
  updateStats(); populateRecommenderFilter(); applyFilters(); renderActivity();

  // Login
  $('#login-form').addEventListener('submit', e=>{
    e.preventDefault();
    const name=$('#username-input').value.trim();
    if(!name) return showToast('Please enter your first name.');
    currentUser=name; ensureUser(name); saveAll();
    $('#login-section').style.display='none';
    $('#main-app').style.display='block';
    $('#user-info').style.display='flex';
    $('#current-user-name').textContent=name;
    $('#recommender').value=name;
    showToast(`Hi, ${name}!`);
  });

  // Nav
  $('#feed-btn').addEventListener('click',function(){showSection('feed',this);});
  $('#add-btn').addEventListener('click',function(){showSection('add',this);});
  $('#my-books-btn').addEventListener('click',function(){showSection('my-books',this);renderMyLists();});
  $('#professional-btn').addEventListener('click',function(){showSection('professional',this);renderProfessionalBooks();});
  $('#prefs-btn').addEventListener('click',function(){
    showSection('prefs',this);
    // load prefs UI
    $('#pref-teams-url').value = sitePrefs.teamsWebhook||'';
    $('#pref-post-new').checked = !!sitePrefs.postNew;
    $('#pref-post-finish').checked = !!sitePrefs.postFinish;
    $('#pref-post-5').checked = !!sitePrefs.postFive;
  });

  // Logout
  $('#logout-btn').addEventListener('click',()=>{
    currentUser=''; saveAll();
    $('#login-section').style.display='block';
    $('#main-app').style.display='none';
    $('#user-info').style.display='none';
    $('#username-input').value='';
  });

  // Export
  $('#export-btn').addEventListener('click', exportAll);

  // Activity toggle
  $('#activity-toggle').addEventListener('click',()=>{activityExpanded=!activityExpanded; renderActivity();});

  // Preferences save
  $('#prefs-save').addEventListener('click', ()=>{
    sitePrefs.teamsWebhook = $('#pref-teams-url').value.trim();
    sitePrefs.postNew = $('#pref-post-new').checked;
    sitePrefs.postFinish = $('#pref-post-finish').checked;
    sitePrefs.postFive = $('#pref-post-5').checked;
    saveAll(); showToast('Preferences saved.');
  });

  // Open Library search
  $('#book-search').addEventListener('input', e=> searchOpenLibrary(e.target.value));
  $('#book-results').addEventListener('click', e=>{
    const item=e.target.closest('.result-item');
    if(!item) return;
    chooseOpenLibrary(parseInt(item.dataset.i,10));
  });

  // Rating stars (new post)
  $$('#rating-stars .star').forEach(star=>{
    star.addEventListener('click',function(){
      currentRating = parseInt(this.dataset.rating,10);
      $$('#rating-stars .star').forEach((s,i)=>s.classList.toggle('filled', i<currentRating));
    });
  });

  // New book form
  $('#book-form').addEventListener('submit', e=>{
    e.preventDefault();
    if(!currentUser) return showToast('Please log in first.');
    const newBook={
      id:Date.now(),
      title:$('#title').value.trim(),
      author:$('#author').value.trim(),
      genre:$('#genre').value,
      recommender:$('#recommender').value.trim()||currentUser,
      synopsis:$('#synopsis').value.trim(),
      reason:$('#reason').value.trim(),
      rating:currentRating,
      image:$('#book-image').value.trim()||"",
      postLikes:0, postLikedBy:[], comments:[]
    };
    if(!newBook.title || !newBook.author) return showToast('Please enter title and author.');
    books.unshift(newBook);
    postActivity('share',{user:currentUser,title:newBook.title,author:newBook.author,rating:newBook.rating});
    saveAll(); updateStats(); populateRecommenderFilter(); applyFilters();
    showSection('feed',$('#feed-btn'));
    showToast('Book shared!');

    // Post to Teams channel (optional)
    postToTeams('new', `📚 New book: “${newBook.title}” — ${newBook.author} (recommended by ${newBook.recommender}, ${newBook.rating}★) • ${window.location.href}`);

    // reset form
    e.target.reset(); currentRating=5;
    $$('#rating-stars .star').forEach((s,i)=>s.classList.toggle('filled', i<5));
  });

  // Filters
  $('#search-input').addEventListener('input', applyFilters);
  $('#category-filter').addEventListener('change', applyFilters);
  $('#recommender-filter').addEventListener('change', applyFilters);
  $('#min-rating').addEventListener('change', applyFilters);
  $('#sort-by').addEventListener('change', applyFilters);

  // Feed action handlers (event delegation)
  $('#books-feed').addEventListener('click', e=>{
    const btn=e.target.closest('button'); if(!btn) return;
    const id=parseInt(btn.dataset.id,10); const action=btn.dataset.action; const book=books.find(b=>b.id===id);
    if(!book) return;
    if(action==='like'){ likePost(book); saveAll(); applyFilters(); }
    if(action==='wish'){ addTo('wishList',book); saveAll(); showToast('Added to Wish List'); }
    if(action==='reading'){ addTo('currentReading',book); saveAll(); showToast('Added to Currently Reading'); }
    if(action==='finish'){ openFinishModal(book,'finish'); }
    if(action==='prev'){ openFinishModal(book,'prev'); }
    if(action==='add-comment'){
      const form = e.target.closest('.comment-form');
      const name = (form.querySelector('[data-field="name"]').value.trim()) || currentUser || 'Anonymous';
      const text = form.querySelector('[data-field="text"]').value.trim();
      const rating = commentRatings.get(id)||5;
      if(!text) return showToast('Please write a comment.');
      book.comments = book.comments||[];
      book.comments.push({id:Date.now(), commenter:name, rating, text, likes:0, likedBy:[]});
      saveAll(); updateStats(); applyFilters(); showToast('Comment added');
    }
    if(action==='like-comment'){
      const cid=parseInt(btn.dataset.cid,10);
      const c = (book.comments||[]).find(x=>x.id===cid); if(!c) return;
      c.likedBy=c.likedBy||[];
      if(c.likedBy.includes(currentUser)){ c.likedBy=c.likedBy.filter(n=>n!==currentUser); c.likes=Math.max(0,(c.likes||0)-1);}
      else { c.likedBy.push(currentUser); c.likes=(c.likes||0)+1; }
      saveAll(); applyFilters();
    }
    if(action==='comment-rating'){
      const r=parseInt(btn.dataset.rating,10); commentRatings.set(id,r);
      const stars=$$(`[data-role="comment-stars"][data-id="${id}"] .star`);
      stars.forEach((s,i)=>s.classList.toggle('filled', i<r));
    }
  });

  // Lists actions (delegation on My Lists container)
  $('#my-books').addEventListener('click', e=>{
    const btn=e.target.closest('button'); if(!btn) return;
    const id=parseInt(btn.dataset.id,10); const action=btn.dataset.action; const book=books.find(b=>b.id===id);
    const data=me();
    if(action==='remove-current'){ data.currentReading = data.currentReading.filter(x=>x.id!==id); }
    if(action==='remove-wish'){ data.wishList = data.wishList.filter(x=>x.id!==id); }
    if(action==='remove-read'){ data.readList = data.readList.filter(x=>x.id!==id); }
    if(action==='reading'){ addTo('currentReading',book); }
    if(action==='finish'){ openFinishModal(book,'finish'); return; }
    saveAll(); renderMyLists(); updateStats();
  });

  // Finish modal stars + buttons
  $$('#finish-stars .star').forEach((s,i)=> s.addEventListener('click',()=> {
    finishContext.rating=i+1;
    $$('#finish-stars .star').forEach((b,j)=>b.classList.toggle('filled', j<i+1));
  }));
  $('#finish-save').addEventListener('click', saveFinishRating);
  $('#finish-cancel').addEventListener('click', closeFinishModal);
}

// Kick off
init();
</script>
</body>
</html>
